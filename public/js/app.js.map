{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/main.js","js/models/product.js","js/controllers/products.js","js/router.js","js/models/tag.js","js/controllers/tags.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","MainController","$rootScope","logout","secureState","e","toState","main","message","isAuthenticated","protectedStates","includes","name","preventDefault","isLoggedIn","$on","Product","$resource","id","update","method","ProductsIndexController","productsIndex","all","query","ProductsNewController","create","save","productsNew","product","ProductsShowController","deleteProduct","productsShow","$remove","get","params","delete","ProductsEditController","console","log","productsEdit","$update","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Tag","TagsIndexController","tagsIndex","TagsNewController","tagsNew","tag","TagsShowController","deleteTag","tagsShow","TagsEditController","tagsEdit","User","UsersIndexController","usersIndex","UsersNewController","usersNew","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  const protectedStates = ['usersEdit', 'usersNew'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    // console.log(toState);\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Product', Product);\n\nProduct.$inject = ['$resource', 'API_URL'];\nfunction Product($resource, API_URL) {\n  return new $resource(`${API_URL}/products/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('ProductsIndexController', ProductsIndexController)\n  .controller('ProductsNewController', ProductsNewController)\n  .controller('ProductsShowController', ProductsShowController)\n  .controller('ProductsEditController', ProductsEditController);\n\nProductsIndexController.$inject = ['Product'];\nfunction ProductsIndexController(Product) {\n  const productsIndex = this;\n\n  productsIndex.all = Product.query();\n}\n\nProductsNewController.$inject = ['Product', '$state'];\nfunction ProductsNewController(Product, $state) {\n  const productsNew = this;\n\n  productsNew.product = {};\n\n  function create() {\n    Product.save(productsNew.product, () => {\n      $state.go('productsIndex');\n    });\n  }\n\n  productsNew.create = create;\n}\n\nProductsShowController.$inject = ['Product', '$state', '$auth'];\nfunction ProductsShowController(Product, $state, $auth) {\n  const productsShow = this;\n\n  productsShow.product = Product.get($state.params);\n\n  function deleteProduct() {\n    productsShow.product.$remove(() => {\n      $state.go('productsIndex');\n    });\n  }\n\n  productsShow.delete = deleteProduct;\n  productsShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nProductsEditController.$inject = ['Product', '$state'];\nfunction ProductsEditController(Product, $state) {\n  const productsEdit = this;\n\n  productsEdit.product = Product.get($state.params);\n  function update() {\n    console.log(productsEdit.product);\n    productsEdit.product.$update(() => {\n      $state.go('productsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular\n  .module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('productsIndex', {\n      url: '/products',\n      templateUrl: '/templates/productsIndex.html',\n      controller: 'ProductsIndexController as productsIndex'\n    })\n    .state('productsShow', {\n      url: '/products/:id',\n      templateUrl: '/templates/productsShow.html',\n      controller: 'ProductsShowController as productsShow'\n    })\n    .state('productsEdit', {\n      url: '/products/:id/edit',\n      templateUrl: '/templates/productsEdit.html',\n      controller: 'ProductsEditController as productsEdit'\n    })\n    .state('productsNew', {\n      url: '/products/New',\n      templateUrl: '/templates/productsNew.html',\n      controller: 'ProductsNewController as productsNew'\n    })\n    .state('tagsIndex', {\n      url: '/tags',\n      templateUrl: '/templates/tagsIndex.html',\n      controller: 'TagsIndexController as tagsIndex'\n    })\n    .state('tagsShow', {\n      url: '/tags/:id',\n      templateUrl: '/templates/tagsShow.html',\n      controller: 'TagsShowController as tagsShow'\n    })\n    .state('tagsEdit', {\n      url: '/tags/:id/edit',\n      templateUrl: '/templates/tagsEdit.html',\n      controller: 'TagsEditController as tagsEdit'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .factory('Tag', Tag);\n\nTag.$inject = ['$resource', 'API_URL'];\nfunction Tag($resource, API_URL) {\n  return new $resource(`${API_URL}/tags/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('TagsIndexController', TagsIndexController)\n  .controller('TagsNewController', TagsNewController)\n  .controller('TagsShowController', TagsShowController)\n  .controller('TagsEditController', TagsEditController);\n\nTagsIndexController.$inject = ['Tag'];\nfunction TagsIndexController(Tag) {\n  const tagsIndex = this;\n\n  tagsIndex.all = Tag.query();\n}\n\nTagsNewController.$inject = ['Tag', '$state'];\nfunction TagsNewController(Tag, $state) {\n  const tagsNew = this;\n\n  tagsNew.tag = {};\n\n  function create() {\n    Tag.save(tagsNew.tag, () => {\n      $state.go('tagsIndex');\n    });\n  }\n\n  tagsNew.create = create;\n}\n\nTagsShowController.$inject = ['Tag', '$state', '$auth'];\nfunction TagsShowController(Tag, $state, $auth) {\n  const tagsShow = this;\n\n  tagsShow.tag = Tag.get($state.params);\n\n  function deleteTag() {\n    tagsShow.tag.$remove(() => {\n      $state.go('tagsIndex');\n    });\n  }\n\n  tagsShow.delete = deleteTag;\n  tagsShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nTagsEditController.$inject = ['Tag', '$state'];\nfunction TagsEditController(Tag, $state) {\n  const tagsEdit = this;\n\n  tagsEdit.tag = Tag.get($state.params);\n\n  function update() {\n    tagsEdit.tag.$update(() => {\n      $state.go('tagsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersNewController', UsersNewController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersNewController.$inject = ['User', '$state'];\nfunction UsersNewController(User, $state) {\n  const usersNew = this;\n\n  usersNew.user = {};\n\n  function create() {\n    User.save(usersNew.user, () => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersNew.create = create;\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n  function update() {\n    console.log(usersEdit.user);\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n"]}