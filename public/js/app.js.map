{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/directives/googleMap.js","js/directives/googlePlaces.js","js/controllers/main.js","js/models/places.js","js/models/product.js","js/controllers/products.js","js/router.js","js/models/tag.js","js/controllers/tags.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","is_store","LoginController","login","credentials","successResponse","currentUser","data","console","log","id","googleMap","$window","restrict","replace","template","scope","markers","center","link","$scope","element","clearMarkers","forEach","marker","setMap","map","google","maps","Map","lat","latitude","lng","longitude","zoom","centerMarker","Marker","position","animation","Animation","BOUNCE","$watchGroup","pos","setCenter","setPosition","$watch","store","DROP","push","googlePlace","require","place","attrs","model","options","types","componentRestrictions","country","autocomplete","places","Autocomplete","addListener","getPlace","latLng","geometry","location","toJSON","google_place_id","place_id","address","formatted_address","phone_number","formatted_phone_number","icon","name","rating","website","$setViewValue","val","MainController","$rootScope","User","logout","secureState","e","toState","main","message","isAuthenticated","get","getPayload","protectedStates","includes","preventDefault","addToSelectedProducts","product","selectedList","isLoggedIn","navigator","geolocation","getCurrentPosition","coords","$apply","$on","Place","$resource","update","method","Product","ProductsIndexController","onOffer","is_available","$update","productsIndex","all","query","user_id","ProductsOfferedController","offOffer","$index","productsOffered","splice","ProductsNewController","create","save","productsShowsNew","productsShow","ProductsShowController","deleteProduct","$remove","params","delete","ProductsEditController","productsEdit","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Tag","TagsIndexController","tagsIndex","TagsNewController","tagsNew","tag","TagsShowController","deleteTag","tagsShow","TagsEditController","tagsEdit","UsersIndexController","usersIndex","UsersNewController","usersNew","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","UserOffersController","userOffers","angular","module","constant","config","$inject","directive","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer' ])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {\n    is_store: false\n  };\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then((successResponse) => {\n        $auth.currentUser = successResponse.data.user;\n        console.log('LoginController: successResponse:', successResponse);\n        if ($auth.currentUser.is_store){\n          $state.go('usersShow', { id: $auth.currentUser.id });\n        } else {\n          $state.go('usersIndex');\n        }\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n .directive('googleMap', googleMap);\n // .directive('googleplace', googleplace);\n\n\ngoogleMap.$inject = ['$window'];\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      markers: '=',\n      center: '='\n    },\n    link: function($scope, element) {\n      // let directionsDisplay = null;\n      // const directionsService = new $window.google.maps.DirectionsService();\n      //\n      // directionsDisplay = new $window.google.maps.DirectionsRenderer();\n      const map = new $window.google.maps.Map(element[0], {\n        center: { lat: $scope.center.latitude, lng: $scope.center.longitude },\n        zoom: 14\n      });\n\n      let markers = [];\n      function clearMarkers() {\n        markers.forEach((marker) => {\n          marker.setMap(null);\n        });\n        markers = [];\n      }\n\n      const centerMarker = new $window.google.maps.Marker({\n        position: { lat: $scope.center.latitude, lng: $scope.center.longitude },\n        map: map,\n        animation: $window.google.maps.Animation.BOUNCE\n      });\n\n      $scope.$watchGroup(['center.latitude', 'center.longitude'], () => {\n        const pos = { lat: $scope.center.latitude, lng: $scope.center.longitude };\n        map.setCenter(pos);\n        centerMarker.setPosition(pos);\n      });\n\n      // directionsDisplay.setMap(map);\n\n      // function calcRoute(origin, destination) {\n      //   var start = origin;\n      //   var end = destination;\n      //   var request = {\n      //     origin: start,\n      //     destination: end,\n      //     travelMode: 'DRIVING'\n      //   };\n      //   directionsService.route(request, function(result, status) {\n      //     if (status === 'OK') {\n      //       directionsDisplay.setDirections(result);\n      //     }\n      //   });\n      // }\n\n      $scope.$watch('markers', () => {\n        clearMarkers();\n        $scope.markers.forEach((store) => {\n         // Create a marker for each store\n          const marker = new $window.google.maps.Marker({\n            position: { lat: store.latitude, lng: store.longitude },\n            map: map,\n            animation: $window.google.maps.Animation.DROP\n          });\n\n          markers.push(marker);\n        });\n      }, true);\n    }\n  };\n}\n\n// googleplace.$inject = ['$window'];\n// function googleplace($window) {\n//   return {\n//     restrict: 'A',\n//     require: 'ngModel',\n//     scope: {\n//       request: '='\n//     },\n//     link: function(scope, element, attrs, model) {\n//       const options = {\n//         types: [],\n//         componentRestrictions: {}\n//       };\n//\n//       const autocomplete = new $window.google.maps.places.Autocomplete(element[0], options);\n//\n//       autocomplete.addListener('place_changed', () => {\n//         const place = autocomplete.getPlace();\n//         const latLng = place.geometry.location.toJSON();\n//         console.log('element', element.attr('id'));\n//         const id = element.attr('id');\n//         if(id === 'origin-input') {\n//           scope.request.location_lat = latLng.lat;\n//           scope.request.location_lng = latLng.lng;\n//         } else if (id === 'destination-input') {\n//           scope.request.destination_lat = latLng.lat;\n//           scope.request.destination_lng = latLng.lng;\n//         }\n//        // scope.request.lat = latLng.lat;\n//        // scope.request.lng = latLng.lng;\n//         model.$setViewValue(element.val());\n//       });\n//     }\n//   };\n// }\n","angular.module('finalProject')\n  .directive('googlePlace', googlePlace);\n\ngooglePlace.$inject = ['$window'];\n\nfunction googlePlace($window) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    scope: {\n      place: '='\n    },\n    link: function($scope, element, attrs, model) {\n      const options = {\n        types: [],\n        componentRestrictions: { country: 'GB' }\n      };\n\n      const autocomplete = new $window.google.maps.places.Autocomplete(element[0], options);\n\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        const latLng = place.geometry.location.toJSON();\n\n        console.log(place);\n\n        $scope.place.lat = latLng.lat;\n        $scope.place.lng = latLng.lng;\n        $scope.place.google_place_id = place.place_id;\n        $scope.place.address = place.formatted_address;\n        $scope.place.phone_number = place.formatted_phone_number;\n        $scope.place.icon = place.icon;\n        $scope.place.name = place.name;\n        $scope.place.rating = place.rating;\n        $scope.place.website = place.website;\n\n        model.$setViewValue(element.val());\n      });\n    }\n  };\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController)\n  ;\n\nMainController.$inject = ['$auth', '$state', '$rootScope', 'User', '$window', '$scope'];\nfunction MainController($auth, $state, $rootScope, User, $window, $scope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('home');\n    });\n  }\n\n  main.location = { latitude: 51.51, longitude: -0.08 };\n\n  $window.navigator.geolocation.getCurrentPosition((pos) => {\n    main.location.latitude = pos.coords.latitude;\n    main.location.longitude = pos.coords.longitude;\n\n    $scope.$apply();\n  });\n\n  const protectedStates = ['usersEdit', 'usersNew'];\n\n  function secureState(e, toState) {\n    main.message = null;\n\n    if($auth.isAuthenticated()) {\n      main.currentUser = User.get({ id: $auth.getPayload().id });\n    }\n\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n\n  main.selectedList = [];\n  // user selected prod list\n  function addToSelectedProducts(product) {\n    main.selectedList.push(product);\n    console.log('Basket: ', main.selectedList);\n  }\n  main.addToSelectedProducts = addToSelectedProducts;\n\n}\n","angular.module('finalProject')\n  .factory('Place', Place);\n\nPlace.$inject = ['$resource', 'API_URL'];\nfunction Place($resource, API_URL) {\n  return new $resource(`${API_URL}/places/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .factory('Product', Product);\n\nProduct.$inject = ['$resource', 'API_URL'];\nfunction Product($resource, API_URL) {\n  return new $resource(`${API_URL}/products/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('ProductsIndexController', ProductsIndexController)\n  .controller('ProductsOfferedController', ProductsOfferedController)\n  .controller('ProductsNewController', ProductsNewController)\n  .controller('ProductsShowController', ProductsShowController)\n  .controller('ProductsEditController', ProductsEditController);\n  // .controller('ProductsPickedIndexController', ProductsPickedIndexController);\n\n\n\nProductsIndexController.$inject = ['Product', '$auth'];\nfunction ProductsIndexController(Product, $auth) {\n  const productsIndex = this;\n\n  productsIndex.all = Product.query({ user_id: $auth.getPayload().id });\n\n  function onOffer(product) {\n    product.is_available = true;\n    product.$update();\n  }\n\n  productsIndex.onOffer = onOffer;\n}\n\nProductsOfferedController.$inject = ['Product', '$auth'];\nfunction ProductsOfferedController(Product, $auth) {\n  const productsOffered = this;\n\n  productsOffered.all = Product.query({ is_available: true, user_id: $auth.getPayload().id });\n\n  function offOffer(product, $index) {\n    product.is_available = false;\n    product.$update();\n\n    console.log($index);\n\n    productsOffered.all.splice($index, 1);\n  }\n\n  productsOffered.offOffer = offOffer;\n}\n\nProductsNewController.$inject = ['Product', '$state'];\nfunction ProductsNewController(Product, $state) {\n  const productsShowsNew = this;\n\n  productsShowsNew.productsShow = {};\n\n  function create() {\n    Product.save(productsShowsNew.productsShow, () => {\n      $state.go('productsIndex');\n    });\n  }\n\n  productsShowsNew.create = create;\n}\n\nProductsShowController.$inject = ['Product', '$state', '$auth'];\nfunction ProductsShowController(Product, $state, $auth) {\n  const productsShow = this;\n\n  productsShow.product = Product.get($state.params);\n\n  function deleteProduct() {\n    productsShow.product.$remove(() => {\n      $state.go('productsIndex');\n    });\n  }\n\n  productsShow.delete = deleteProduct;\n  productsShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nProductsEditController.$inject = ['Product', '$state'];\nfunction ProductsEditController(Product, $state) {\n  const productsEdit = this;\n\n  productsEdit.product = Product.get($state.params);\n\n  function update() {\n    productsEdit.product.$update(() => {\n      $state.go('productsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n\n// ProductsPickedIndexController.$inject = ['Product', '$auth', 'User'];\n// function ProductsPickedIndexController(Product, $auth, User) {\n//   const productsPickedIndex = this;\n//   productsPickedIndex.productPicks = [];\n//   // console.log($auth.getPayload());\n//   User.get({id: $auth.getPayload()._id}, (user) => {\n//     productsPickedIndex.user = user;\n//   });\n// }\n","angular\n  .module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html',\n      controller: 'MainController as home'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('productsOffered', {\n      url: '/products/offered',\n      templateUrl: '/templates/productsOffered.html',\n      controller: 'ProductsOfferedController as productsOffered'\n    })\n    .state('userOffers', {\n      url: '/offers',\n      templateUrl: '/templates/userOffers.html',\n      controller: 'UserOffersController as userOffers'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('productsIndex', {\n      url: '/products',\n      templateUrl: '/templates/productsIndex.html',\n      controller: 'ProductsIndexController as productsIndex'\n    })\n    .state('productsNew', {\n      url: '/products/new',\n      templateUrl: '/templates/productsNew.html',\n      controller: 'ProductsNewController as productsNew'\n    })\n    .state('productsShow', {\n      url: '/products/:id',\n      templateUrl: '/templates/productsShow.html',\n      controller: 'ProductsShowController as productsShow'\n    })\n    .state('productsEdit', {\n      url: '/products/:id/edit',\n      templateUrl: '/templates/productsEdit.html',\n      controller: 'ProductsEditController as productsEdit'\n    })\n    .state('tagsIndex', {\n      url: '/tags',\n      templateUrl: '/templates/tagsIndex.html',\n      controller: 'TagsIndexController as tagsIndex'\n    })\n    .state('tagsShow', {\n      url: '/tags/:id',\n      templateUrl: '/templates/tagsShow.html',\n      controller: 'TagsShowController as tagsShow'\n    })\n    .state('tagsEdit', {\n      url: '/tags/:id/edit',\n      templateUrl: '/templates/tagsEdit.html',\n      controller: 'TagsEditController as tagsEdit'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .factory('Tag', Tag);\n\nTag.$inject = ['$resource', 'API_URL'];\nfunction Tag($resource, API_URL) {\n  return new $resource(`${API_URL}/tags/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('TagsIndexController', TagsIndexController)\n  .controller('TagsNewController', TagsNewController)\n  .controller('TagsShowController', TagsShowController)\n  .controller('TagsEditController', TagsEditController);\n\nTagsIndexController.$inject = ['Tag'];\nfunction TagsIndexController(Tag) {\n  const tagsIndex = this;\n\n  tagsIndex.all = Tag.query();\n}\n\nTagsNewController.$inject = ['Tag', '$state'];\nfunction TagsNewController(Tag, $state) {\n  const tagsNew = this;\n\n  tagsNew.tag = {};\n\n  function create() {\n    Tag.save(tagsNew.tag, () => {\n      $state.go('tagsIndex');\n    });\n  }\n\n  tagsNew.create = create;\n}\n\nTagsShowController.$inject = ['Tag', '$state', '$auth'];\nfunction TagsShowController(Tag, $state, $auth) {\n  const tagsShow = this;\n\n  tagsShow.tag = Tag.get($state.params);\n\n  function deleteTag() {\n    tagsShow.tag.$remove(() => {\n      $state.go('tagsIndex');\n    });\n  }\n\n  tagsShow.delete = deleteTag;\n  tagsShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nTagsEditController.$inject = ['Tag', '$state'];\nfunction TagsEditController(Tag, $state) {\n  const tagsEdit = this;\n\n  tagsEdit.tag = Tag.get($state.params);\n\n  function update() {\n    tagsEdit.tag.$update(() => {\n      $state.go('tagsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersNewController', UsersNewController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController)\n  .controller('UserOffersController', UserOffersController);\n\nUsersIndexController.$inject = ['$auth', 'User'];\nfunction UsersIndexController($auth, User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query({ is_store: true });\n}\n\nUsersNewController.$inject = ['User', '$state'];\nfunction UsersNewController(User, $state) {\n  const usersNew = this;\n\n  usersNew.user = {};\n\n  function create() {\n    User.save(usersNew.user, () => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersNew.create = create;\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n  function update() {\n    console.log(usersEdit.user);\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n\nUserOffersController.$inject = ['Product'];\nfunction UserOffersController(Product) {\n  const userOffers = this;\n\n  userOffers.all = Product.query({ is_available: true });\n}\n"]}