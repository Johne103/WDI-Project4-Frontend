{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/directives/googleMap.js","js/directives/googlePlaces.js","js/controllers/main.js","js/models/places.js","js/models/product.js","js/controllers/products.js","js/router.js","js/models/tag.js","js/controllers/tags.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","is_store","LoginController","login","credentials","successResponse","currentUser","data","console","log","id","googleMap","$window","restrict","replace","template","scope","center","store","link","$scope","element","clearMarkers","markers","forEach","marker","setMap","calcRoute","origin","destination","start","end","request","travelMode","directionsService","route","result","status","directionsDisplay","setDirections","google","maps","DirectionsService","DirectionsRenderer","map","Map","zoom","$watch","stores","Marker","position","lat","parseFloat","location_lat","lng","location_lng","animation","Animation","DROP","addListener","infoWindow","open","push","destination_lat","destination_lng","contentString","value","earliest_pickup","InfoWindow","content","googleplace","require","attrs","model","options","types","componentRestrictions","autocomplete","places","Autocomplete","place","getPlace","latLng","geometry","location","toJSON","attr","$setViewValue","val","googlePlace","country","google_place_id","place_id","address","formatted_address","phone_number","formatted_phone_number","icon","name","rating","website","MainController","$rootScope","User","logout","secureState","e","toState","main","message","get","getPayload","isAuthenticated","protectedStates","includes","preventDefault","addToSelectedProducts","product","selectedList","isLoggedIn","$on","Place","$resource","update","method","Product","ProductsIndexController","onOffer","is_available","$update","productsIndex","all","query","user_id","ProductsOfferedController","offOffer","$index","productsOffered","splice","ProductsNewController","create","save","productsShowsNew","productsShow","ProductsShowController","deleteProduct","$remove","params","delete","ProductsEditController","productsEdit","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Tag","TagsIndexController","tagsIndex","TagsNewController","tagsNew","tag","TagsShowController","deleteTag","tagsShow","TagsEditController","tagsEdit","UsersIndexController","usersIndex","currentUserId","$promise","users","find","filter","UsersNewController","usersNew","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","UserOffersController","userOffers","angular","module","constant","config","$inject","directive","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer' ])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {\n    is_store: false\n  };\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then((successResponse) => {\n        $auth.currentUser = successResponse.data.user;\n        console.log('LoginController: successResponse:', successResponse);\n        if ($auth.currentUser.is_store){\n          $state.go('usersShow', { id: $auth.currentUser.id });\n        } else {\n          $state.go('usersIndex');\n        }\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n .directive('googleMap', googleMap)\n .directive('googleplace', googleplace);\n\n\ngoogleMap.$inject = ['$window'];\nfunction googleMap($window) {\n  return {\n    restrict: 'E',\n    replace: true,\n    template: '<div class=\"google-map\"></div>',\n    scope: {\n      center: '=',\n      store: '='\n    },\n    link: function($scope, element) {\n      let directionsDisplay = null;\n      const directionsService = new google.maps.DirectionsService();\n\n      directionsDisplay = new google.maps.DirectionsRenderer();\n      const map = new $window.google.maps.Map(element[0], {\n        center: $scope.center,\n        zoom: 14\n      });\n\n      directionsDisplay.setMap(map);\n\n      let markers = [];\n      function clearMarkers() {\n        markers.forEach((marker) => {\n          marker.setMap(null);\n        });\n        markers = [];\n      }\n\n      function calcRoute(origin, destination) {\n        var start = origin;\n        var end = destination;\n        var request = {\n          origin: start,\n          destination: end,\n          travelMode: 'DRIVING'\n        };\n        directionsService.route(request, function(result, status) {\n          if (status === 'OK') {\n            directionsDisplay.setDirections(result);\n          }\n        });\n      }\n\n      $scope.$watch('stores', () => {\n        clearMarkers();\n        if($scope.stores) {\n          $scope.stores.forEach((store) => {\n           // Create a marker for each store\n            const marker = new $window.google.maps.Marker({\n              position: { lat: parseFloat(store.location_lat), lng: parseFloat(store.location_lng) },\n              map: map,\n              animation: $window.google.maps.Animation.DROP\n            });\n            marker.addListener('click', () => {\n              infoWindow.open(map, marker);\n              markers.push(marker);\n             // Creating googlemap latLng objects with the selected store lat and lngs\n              const origin = { lat: parseFloat(store.location_lat), lng: parseFloat(store.location_lng) };\n              const destination = { lat: parseFloat(store.destination_lat), lng: parseFloat(store.destination_lng) };\n             // On click, we calculate the route based on the store origin and destination objects\n              calcRoute(origin, destination);\n            });\n            const contentString = `\n             <p>Value: ${store.value}</p>\n             <p>Earliest Pickup: ${store.earliest_pickup}</p>\n           `;\n            const infoWindow = new $window.google.maps.InfoWindow({\n              content: contentString\n            });\n          });\n        }\n      }, true);\n    }\n  };\n}\n\ngoogleplace.$inject = ['$window'];\nfunction googleplace($window) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    scope: {\n      request: '='\n    },\n    link: function(scope, element, attrs, model) {\n      const options = {\n        types: [],\n        componentRestrictions: {}\n      };\n\n      const autocomplete = new $window.google.maps.places.Autocomplete(element[0], options);\n\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        const latLng = place.geometry.location.toJSON();\n        console.log('element', element.attr('id'));\n        const id = element.attr('id');\n        if(id === 'origin-input') {\n          scope.request.location_lat = latLng.lat;\n          scope.request.location_lng = latLng.lng;\n        } else if (id === 'destination-input') {\n          scope.request.destination_lat = latLng.lat;\n          scope.request.destination_lng = latLng.lng;\n        }\n       // scope.request.lat = latLng.lat;\n       // scope.request.lng = latLng.lng;\n        model.$setViewValue(element.val());\n      });\n    }\n  };\n}\n","angular.module('finalProject')\n  .directive('googlePlace', googlePlace);\n\ngooglePlace.$inject = ['$window'];\n\nfunction googlePlace($window) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    scope: {\n      place: '='\n    },\n    link: function($scope, element, attrs, model) {\n      const options = {\n        types: [],\n        componentRestrictions: { country: 'GB' }\n      };\n\n      const autocomplete = new $window.google.maps.places.Autocomplete(element[0], options);\n\n      autocomplete.addListener('place_changed', () => {\n        const place = autocomplete.getPlace();\n        const latLng = place.geometry.location.toJSON();\n\n        console.log(place);\n\n        $scope.place.lat = latLng.lat;\n        $scope.place.lng = latLng.lng;\n        $scope.place.google_place_id = place.place_id;\n        $scope.place.address = place.formatted_address;\n        $scope.place.phone_number = place.formatted_phone_number;\n        $scope.place.icon = place.icon;\n        $scope.place.name = place.name;\n        $scope.place.rating = place.rating;\n        $scope.place.website = place.website;\n\n        model.$setViewValue(element.val());\n      });\n    }\n  };\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController)\n  ;\n\nMainController.$inject = ['$auth', '$state', '$rootScope', 'User'];\nfunction MainController($auth, $state, $rootScope, User) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('home');\n    });\n  }\n\n  const protectedStates = ['usersEdit', 'usersNew'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    main.currentUser = User.get({ id: $auth.getPayload().id });\n    // console.log(toState);\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n\n  main.selectedList = [];\n  // user selected prod list\n  function addToSelectedProducts(product) {\n    main.selectedList.push(product);\n    console.log('Basket: ', main.selectedList);\n  }\n  main.addToSelectedProducts = addToSelectedProducts;\n\n}\n","angular.module('finalProject')\n  .factory('Place', Place);\n\nPlace.$inject = ['$resource', 'API_URL'];\nfunction Place($resource, API_URL) {\n  return new $resource(`${API_URL}/places/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .factory('Product', Product);\n\nProduct.$inject = ['$resource', 'API_URL'];\nfunction Product($resource, API_URL) {\n  return new $resource(`${API_URL}/products/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('ProductsIndexController', ProductsIndexController)\n  .controller('ProductsOfferedController', ProductsOfferedController)\n  .controller('ProductsNewController', ProductsNewController)\n  .controller('ProductsShowController', ProductsShowController)\n  .controller('ProductsEditController', ProductsEditController);\n  // .controller('ProductsPickedIndexController', ProductsPickedIndexController);\n\n\n\nProductsIndexController.$inject = ['Product', '$auth'];\nfunction ProductsIndexController(Product, $auth) {\n  const productsIndex = this;\n\n  productsIndex.all = Product.query({ user_id: $auth.getPayload().id });\n\n  function onOffer(product) {\n    product.is_available = true;\n    product.$update();\n  }\n\n  productsIndex.onOffer = onOffer;\n}\n\nProductsOfferedController.$inject = ['Product', '$auth'];\nfunction ProductsOfferedController(Product, $auth) {\n  const productsOffered = this;\n\n  productsOffered.all = Product.query({ is_available: true, user_id: $auth.getPayload().id });\n\n  function offOffer(product, $index) {\n    product.is_available = false;\n    product.$update();\n\n    console.log($index);\n\n    productsOffered.all.splice($index, 1);\n  }\n\n  productsOffered.offOffer = offOffer;\n}\n\nProductsNewController.$inject = ['Product', '$state'];\nfunction ProductsNewController(Product, $state) {\n  const productsShowsNew = this;\n\n  productsShowsNew.productsShow = {};\n\n  function create() {\n    Product.save(productsShowsNew.productsShow, () => {\n      $state.go('productsIndex');\n    });\n  }\n\n  productsShowsNew.create = create;\n}\n\nProductsShowController.$inject = ['Product', '$state', '$auth'];\nfunction ProductsShowController(Product, $state, $auth) {\n  const productsShow = this;\n\n  productsShow.product = Product.get($state.params);\n\n  function deleteProduct() {\n    productsShow.product.$remove(() => {\n      $state.go('productsIndex');\n    });\n  }\n\n  productsShow.delete = deleteProduct;\n  productsShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nProductsEditController.$inject = ['Product', '$state'];\nfunction ProductsEditController(Product, $state) {\n  const productsEdit = this;\n\n  productsEdit.product = Product.get($state.params);\n\n  function update() {\n    productsEdit.product.$update(() => {\n      $state.go('productsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n\n// ProductsPickedIndexController.$inject = ['Product', '$auth', 'User'];\n// function ProductsPickedIndexController(Product, $auth, User) {\n//   const productsPickedIndex = this;\n//   productsPickedIndex.productPicks = [];\n//   // console.log($auth.getPayload());\n//   User.get({id: $auth.getPayload()._id}, (user) => {\n//     productsPickedIndex.user = user;\n//   });\n// }\n","angular\n  .module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html',\n      controller: 'MainController as home'\n    })\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('productsOffered', {\n      url: '/products/offered',\n      templateUrl: '/templates/productsOffered.html',\n      controller: 'ProductsOfferedController as productsOffered'\n    })\n    .state('userOffers', {\n      url: '/offers',\n      templateUrl: '/templates/userOffers.html',\n      controller: 'UserOffersController as userOffers'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('productsIndex', {\n      url: '/products',\n      templateUrl: '/templates/productsIndex.html',\n      controller: 'ProductsIndexController as productsIndex'\n    })\n    .state('productsNew', {\n      url: '/products/new',\n      templateUrl: '/templates/productsNew.html',\n      controller: 'ProductsNewController as productsNew'\n    })\n    .state('productsShow', {\n      url: '/products/:id',\n      templateUrl: '/templates/productsShow.html',\n      controller: 'ProductsShowController as productsShow'\n    })\n    .state('productsEdit', {\n      url: '/products/:id/edit',\n      templateUrl: '/templates/productsEdit.html',\n      controller: 'ProductsEditController as productsEdit'\n    })\n    .state('tagsIndex', {\n      url: '/tags',\n      templateUrl: '/templates/tagsIndex.html',\n      controller: 'TagsIndexController as tagsIndex'\n    })\n    .state('tagsShow', {\n      url: '/tags/:id',\n      templateUrl: '/templates/tagsShow.html',\n      controller: 'TagsShowController as tagsShow'\n    })\n    .state('tagsEdit', {\n      url: '/tags/:id/edit',\n      templateUrl: '/templates/tagsEdit.html',\n      controller: 'TagsEditController as tagsEdit'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .factory('Tag', Tag);\n\nTag.$inject = ['$resource', 'API_URL'];\nfunction Tag($resource, API_URL) {\n  return new $resource(`${API_URL}/tags/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('TagsIndexController', TagsIndexController)\n  .controller('TagsNewController', TagsNewController)\n  .controller('TagsShowController', TagsShowController)\n  .controller('TagsEditController', TagsEditController);\n\nTagsIndexController.$inject = ['Tag'];\nfunction TagsIndexController(Tag) {\n  const tagsIndex = this;\n\n  tagsIndex.all = Tag.query();\n}\n\nTagsNewController.$inject = ['Tag', '$state'];\nfunction TagsNewController(Tag, $state) {\n  const tagsNew = this;\n\n  tagsNew.tag = {};\n\n  function create() {\n    Tag.save(tagsNew.tag, () => {\n      $state.go('tagsIndex');\n    });\n  }\n\n  tagsNew.create = create;\n}\n\nTagsShowController.$inject = ['Tag', '$state', '$auth'];\nfunction TagsShowController(Tag, $state, $auth) {\n  const tagsShow = this;\n\n  tagsShow.tag = Tag.get($state.params);\n\n  function deleteTag() {\n    tagsShow.tag.$remove(() => {\n      $state.go('tagsIndex');\n    });\n  }\n\n  tagsShow.delete = deleteTag;\n  tagsShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nTagsEditController.$inject = ['Tag', '$state'];\nfunction TagsEditController(Tag, $state) {\n  const tagsEdit = this;\n\n  tagsEdit.tag = Tag.get($state.params);\n\n  function update() {\n    tagsEdit.tag.$update(() => {\n      $state.go('tagsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersNewController', UsersNewController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController)\n  .controller('UserOffersController', UserOffersController);\n\nUsersIndexController.$inject = ['$auth', 'User'];\nfunction UsersIndexController($auth, User) {\n  const usersIndex = this;\n  const currentUserId = $auth.getPayload().id;\n\n  console.log('UsersIndexController: $auth:', $auth);\n  console.log('UsersIndexController: $auth.currentUser:', $auth.currentUser);\n  console.log('UsersIndexController: $auth.getPayload():', $auth.getPayload());\n\n  usersIndex.all = [];\n  User.query().$promise.then((users) => {\n    const currentUser = users.find((user) => {\n      return user.id === currentUserId;\n    });\n    console.log('currentUser:', currentUser);\n    usersIndex.all = users.filter((user) => {\n      return user.is_store;\n    });\n    console.log('usersIndex.all:', usersIndex.all);\n  });\n}\n\nUsersNewController.$inject = ['User', '$state'];\nfunction UsersNewController(User, $state) {\n  const usersNew = this;\n\n  usersNew.user = {};\n\n  function create() {\n    User.save(usersNew.user, () => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersNew.create = create;\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n  function update() {\n    console.log(usersEdit.user);\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n\nUserOffersController.$inject = ['Product'];\nfunction UserOffersController(Product) {\n  const userOffers = this;\n\n  userOffers.all = Product.query({ is_available: true });\n}\n"]}